*,
*::after,
*::before {
  box-sizing: border-box;
}

$columns: 12;
$gutter: 20px;
$large-device: 1200px;
$medium-device: 760px;
$small-device: 480px;

@mixin device($type) {
  @if $type == large {
    @media (min-width: $large-device) {
      @content;
    }
  } @else if $type == medium {
    @media (min-width: $medium-device) and (max-width: #{$large-device - 1}) {
      @content;
    }
  } @else if $type == small {
    @media (max-width: #{$medium-device - 1}) {
      @content;
    }
  }
}

@function grid($col, $offset: false) {
  $width: calc($col / $columns) * 100%;
  $result: calc(#{$width} - #{$gutter});
  @if $offset == offset {
    $gutter: calc($gutter / 2);
    $result: calc(#{$width} + #{$gutter});
  }
  @return $result;
}

@for $i from 1 through $columns {
  .grid-#{$i} {
    width: grid($i);
  }
}

@mixin grid-structure {
  display: inline-block;
  min-height: 1px;
  margin-left: calc($gutter / 2);
  margin-right: calc($gutter / 2);
  @include device(small) {
    width: 100%;
    margin-left: 0;
    margin-right: 0;
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
  }
}

[class^="grid-"] {
  @include grid-structure;
}

@for $i from 1 through $columns {
  .offset-#{$i} {
    margin-left: grid($i, offset);
    @extend %offset;
  }
}

@include device(small) {
  %offset {
    margin-left: 0;
  }
}

@mixin container {
  max-width: $large-device;
  margin: 0 auto;
  position: relative;
  @include device(medium) {
    max-width: $medium-device;
  }
  @include device(small) {
    max-width: $small-device;
    padding-left: calc($gutter / 2);
    padding-right: calc($gutter / 2);
  }
}

.container {
  @include container;
}

@mixin row {
  position: relative;
  margin-left: calc(-1 * $gutter / 2);
  margin-right: calc(-1 * $gutter / 2);
  @include device(small) {
    margin-left: 0;
    margin-right: 0;
  }
}

.row {
  @include row;
}
